name: Test if tarball can be build and code compiled from it

#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2024 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
# This github CI script constructs a tarball and checks if it is build correctly.
#

env:
  MAKEFLAGS: "-j2 V=0"


on:
  push:
    branches:
      - main
      - develop
      - CI-*tarball* # for testing this script, all feature branches with "tarball" in their name
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: 

jobs:
  build:

    if: (github.event_name == 'schedule' && github.repository == 'DLR-AMR/t8code') || (github.event_name != 'schedule')
    runs-on: ubuntu-20.04
    container: dlramr/t8code-ubuntu:t8-dependencies
    timeout-minutes: 90
    steps:
#
# Setup and bootstrap
#
    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0
    - name: Update packages
      run: apt-get update && apt-get upgrade -y
      # This seems to be necessary because of the docker container
    - name: disable ownership checks
      run: git config --global --add safe.directory '*'
    - name: init submodules
      run: git submodule init
    - name: update submodules
      run: git submodule update
    - name: bootstrap
      run: ./bootstrap
#
#  T8CODE 
#     with p4est and sc as internal dependencies which is needed for make dist
#
#
    - name: configure
      run: mkdir build && cd build && ../configure
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: config.log
        path: build/config.log
# Start building tarball
    - name: Install pandoc
      uses: nikeee/setup-pandoc@v1
    - name: Test pandoc
      run: pandoc --version
# Build the tarball
    - name: Make tarball
      run: cd build && make dist && mkdir tarballs && mv *.tar.gz tarballs
# Upload the tarball
    - name: upload tarball
      uses: actions/upload-artifact@v4
      with:
        name: tarballs
        path: build/tarballs
 # Perform a make distcheck to check the distribution locally
 #   - name: make distcheck
 #     run: |
 #           cd build
 #           make distcheck


  test-tarball:
    needs: build
    runs-on: ubuntu-20.04
    container: dlramr/t8code-ubuntu:t8-dependencies
    timeout-minutes: 90
    steps: 
    - name: Update packages
      run: apt-get update && apt-get upgrade -y
    # This seems to be necessary because of the docker container
    - name: Download tarball
      uses: actions/download-artifact@v4
      with:
          name: tarballs
          path: tarballs
    - name: Extract tarball
      run: tar xzf tarballs/*.tar.gz -C $RUNNER_TEMP
    - name: update Github_env
      run: export TAR_DIR="$RUNNER_TEMP/`basename tarballs/*.tar.gz .tar.gz`" &&
          echo TAR_DIR="$TAR_DIR" >>$GITHUB_ENV
          
# build config vars
    - name: build CFLAGS and CXXFLAGS variables
      run: echo CFLAGS_var="-Wall -pedantic -O0" >> $GITHUB_ENV
           && echo CXXFLAGS_var="-Wall -pedantic -O0" >> $GITHUB_ENV
      # Note: We want to use '-Werror', but if we already provide it at the configure step
      #       we get errors in configure that we cannot remove (for example the autotools way
      #       of checking for libm results in a compiler warning).
      #       Thus, we add '-Werror' later at the make step.
    - name: less-test-option
      if: github.event_name == 'pull_request'
      run: export LESS_TEST_OPTION="--enable-less-tests"
            && echo LESS_TEST_OPTION="$LESS_TEST_OPTION" >> $GITHUB_ENV
    - name: build config variables
      run: export CONFIG_OPTIONS="--without-blas ${LESS_TEST_OPTION}"
            && export CONFIG_DEBUG="$CONFIG_OPTIONS --enable-debug --enable-mpi"
            && echo CONFIG_OPTIONS="$CONFIG_OPTIONS" >> $GITHUB_ENV
            && echo CONFIG_DEBUG="$CONFIG_DEBUG" >> $GITHUB_ENV
    - name: Check vars
      run: echo "[$CONFIG_DEBUG]"
    - name: configure from Tarball
      run: mkdir build_tar && cd build_tar && $TAR_DIR/configure $CONFIG_DEBUG CFLAGS="$CFLAGS_var" CXXFLAGS="$CXXFLAGS_var"
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build_tar.log
        path: build_tar/config.log
    - name: make
      run: cd build_tar && make $MAKEFLAGS
    - name: make install
      run: cd build_tar && make install $MAKEFLAGS 
    - name: make check
      run: cd build_tar && make check $MAKEFLAGS CFLAGS="$CFLAGS_var -Werror" CXXFLAGS="$CXXFLAGS_var -Werror"
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build_tar.log
        path: build_tar/test-suite.log

