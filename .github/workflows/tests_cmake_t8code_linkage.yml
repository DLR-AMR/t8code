name: CMake tests t8code linkage


#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2024 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

env:
  DEBUG_CONFIG: "-O1"

on:
  workflow_call:
    inputs:
      MAKEFLAGS:
        required: true
        type: string
        description: 'Make flags to use for compilation (like -j4)'
      MPI:
        required: true
        type: string
        description: 'Use MPI for compilation (ON/OFF)'
      BUILD_TYPE:
        required: true
        type: string
        description: 'Build type (Release/Debug)'
      LESS_TESTS:
        required: true
        type: boolean
        description: 'Enable less tests option for configuring'

jobs:  
  t8code_cmake_tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container: dlramr/t8code-ubuntu:t8-dependencies
    steps:
#
# Setup
#
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: SC_P4EST_MPI_${{ inputs.MPI }}
    - name: untar artifact
      run: tar -xf artifact.tar && rm artifact.tar
    - name: Update packages
      run: apt-get update && apt-get upgrade -y
      # This seems to be necessary because of the docker container
    - name: disable ownership checks
      run: git config --global --add safe.directory '*'
    - name: Get input vars
      run: export MAKEFLAGS="${{ inputs.MAKEFLAGS }}"
        && export MPI="${{ inputs.MPI }}"
        && export BUILD_TYPE="${{ inputs.BUILD_TYPE }}"
        && export SC_PATH=$PWD/sc/build/$BUILD_TYPE
        && export P4EST_PATH=$PWD/p4est/build/$BUILD_TYPE
        && echo MAKEFLAGS="$MAKEFLAGS" >> $GITHUB_ENV
        && echo MPI="$MPI" >> $GITHUB_ENV
        && echo BUILD_TYPE="$BUILD_TYPE" >> $GITHUB_ENV
        && echo SC_PATH="$SC_PATH" >> $GITHUB_ENV
        && echo P4EST_PATH="$P4EST_PATH" >> $GITHUB_ENV
#
#  T8CODE
#
#
    # build config vars
    - name: less-test option
      if: ${{ inputs.LESS_TESTS }}
      run: export LESS_TEST_OPTION="-DT8CODE_ENABLE_LESS_TESTS=ON"
           && echo LESS_TEST_OPTION="$LESS_TEST_OPTION" >> $GITHUB_ENV
    - name: build config variables
      run: export CONFIG_OPTIONS="${LESS_TEST_OPTION} -GNinja -DCMAKE_C_FLAGS_DEBUG=${DEBUG_CONFIG} -DCMAKE_CXX_FLAGS_DEBUG=${DEBUG_CONFIG} -DT8CODE_USE_SYSTEM_SC=ON -DT8CODE_USE_SYSTEM_P4EST=ON -DT8CODE_BUILD_PEDANTIC=ON -DT8CODE_BUILD_WALL=ON -DT8CODE_BUILD_WERROR=ON -DT8CODE_ENABLE_MPI=$MPI -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSC_DIR=$SC_PATH/install/cmake -DP4EST_DIR=$P4EST_PATH/install/cmake"
           && echo CONFIG_OPTIONS="$CONFIG_OPTIONS" >> $GITHUB_ENV
    # cmake and test with netcdf
    - name: check NetCDF
      run: echo "Checking NetCDF"
    - name: echo cmake line
      run: echo cmake ../ $CONFIG_OPTIONS -DT8CODE_ENABLE_NETCDF=ON
    - name: cmake MPI NetCDF debug
      run: mkdir build_netcdf && cd build_netcdf && cmake ../ $CONFIG_OPTIONS -DT8CODE_ENABLE_NETCDF=ON
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cmake_${{ inputs.BUILD_TYPE }}_MPI_${{ inputs.MPI }}_NetCDF.log
        path: build_netcdf/CMakeFiles/CMakeOutput.log
    - name: make
      run: cd build_netcdf && ninja $MAKEFLAGS
    - name: ninja install
      run: cd build_netcdf && ninja install $MAKEFLAGS
    - name: serial tests (if MPI is enabled)
      run: cd build_netcdf && ctest $MAKEFLAGS -R _serial
      if: ${{ inputs.MPI == 'ON' }}
    - name: parallel tests (if MPI is enabled)
      run: cd build_netcdf && ctest -R _parallel
      if: ${{ inputs.MPI == 'ON' }}
    - name: tests (if MPI is disabled)
      run: cd build_netcdf && ctest $MAKEFLAGS
      if: ${{ inputs.MPI == 'OFF' }}
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-suite_${{ inputs.BUILD_TYPE }}_MPI_${{ inputs.MPI }}_NetCDF.log
        path: build_netcdf/Testing/Temporary/LastTest.log
# cmake and test with OpenCASCADE
    - name: check OpenCASCADE
      run: echo "Checking OpenCASCADE"
    - name: echo cmake line
      run: echo cmake ../ $CONFIG_OPTIONS -DT8CODE_ENABLE_OCC=ON
    - name: cmake OpenCASCADE
      run: mkdir build_occ && cd build_occ && cmake ../ $CONFIG_OPTIONS -DT8CODE_ENABLE_OCC=ON
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cmake_${{ inputs.BUILD_TYPE }}_MPI_${{ inputs.MPI }}_OCC.log
        path: build_occ/CMakeFiles/CMakeOutput.log
    - name: make
      run: cd build_occ && ninja $MAKEFLAGS
    - name: ninja install
      run: cd build_occ && ninja install $MAKEFLAGS
    - name: serial tests (if MPI is enabled)
      run: cd build_occ && ctest $MAKEFLAGS -R _serial
      if: ${{ inputs.MPI == 'ON' }}
    - name: parallel tests (if MPI is enabled)
      run: cd build_occ && ctest -R _parallel
      if: ${{ inputs.MPI == 'ON' }}
    - name: tests (if MPI is disabled)
      run: cd build_occ && ctest $MAKEFLAGS
      if: ${{ inputs.MPI == 'OFF' }}
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-suite_${{ inputs.BUILD_TYPE }}_MPI_${{ inputs.MPI }}_OCC.log
        path: build_occ/Testing/Temporary/LastTest.log
# cmake and test with VTK
    - name: check VTK
      run: echo "Checking VTK"
    - name: echo cmake line
      run: echo cmake ../ $CONFIG_OPTIONS -DT8CODE_ENABLE_VTK=ON -DVTK_DIR=/usr/local/lib/cmake/vtk-9.1
    - name: cmake MPI VTK debug
      run: mkdir build_vtk && cd build_vtk && cmake ../ $CONFIG_OPTIONS -DT8CODE_ENABLE_VTK=ON -DVTK_DIR=/usr/local/lib/cmake/vtk-9.1
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cmake_${{ inputs.BUILD_TYPE }}_MPI_${{ inputs.MPI }}_VTK.log
        path: build_vtk/CMakeFiles/CMakeOutput.log
    - name: make
      run: cd build_vtk && ninja $MAKEFLAGS
    - name: ninja install
      run: cd build_vtk && ninja install $MAKEFLAGS
    - name: serial tests (if MPI is enabled)
      run: cd build_vtk && ctest $MAKEFLAGS -R _serial
      if: ${{ inputs.MPI == 'ON' }}
    - name: parallel tests (if MPI is enabled)
      run: cd build_vtk && ctest -R _parallel
      if: ${{ inputs.MPI == 'ON' }}
    - name: tests (if MPI is disabled)
      run: cd build_vtk && ctest $MAKEFLAGS
      if: ${{ inputs.MPI == 'OFF' }}
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-suite_${{ inputs.BUILD_TYPE }}_MPI_${{ inputs.MPI }}_VTK.log
        path: build_vtk/Testing/Temporary/LastTest.log
