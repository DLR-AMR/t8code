name: t8code cmake tests parallel


#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2024 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
# This github CI script installs t8code and runs its tests for various configurations.
# We compile sc and p4est as thirdparty libraries and use caching to only trigger a
# new installation of them when their versions have changed in t8code.
#
# Note: To manually enforce sc and p4est installation, either increase the counter
#       in the "key:" entries of the sc and p4est steps or set the variables
#       SC_IGNORE_CACHE and P4EST_IGNORE_CACHE to 1 in the respective steps.

on:
  workflow_call:
    inputs:
      MAKEFLAGS:
        required: true
        type: string

jobs:
  preparation:
    uses: ./.github/workflows/tests_t8code_cmake_preparation.yml
    with:
      MAKEFLAGS: ${{ inputs.MAKEFLAGS }}
  
  cmake_tests_parallel:
    needs: preparation
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container: dlramr/t8code-ubuntu:t8-dependencies
    steps:
    - name: get sc and p4est folders
      run: echo SC_DEBUG=${{ needs.preparation.outputs.SC_DEBUG }} >> $GITHUB_ENV
        && echo SC_RELEASE=${{ needs.preparation.outputs.SC_RELEASE }} >> $GITHUB_ENV
        && echo P4EST_DEBUG=${{ needs.preparation.outputs.P4EST_DEBUG }} >> $GITHUB_ENV
        && echo P4EST_RELEASE=${{ needs.preparation.outputs.P4EST_RELEASE }} >> $GITHUB_ENV
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: SC_P4EST_MPI
    - name: Update packages
      run: apt-get update && apt-get upgrade -y
      # This seems to be necessary because of the docker container
    - name: disable ownership checks
      run: git config --global --add safe.directory '*'
#
#  T8CODE
#
#
    # build config vars
    - name: less-test-option
      if: github.event_name == 'pull_request'
      run: export LESS_TEST_OPTION="-DT8CODE_ENABLE_LESS_TESTS=ON"
           && echo LESS_TEST_OPTION="$LESS_TEST_OPTION" >> $GITHUB_ENV
    - name: build config variables
      run: export CONFIG_OPTIONS="${LESS_TEST_OPTION} -DT8CODE_USE_SYSTEM_SC=ON -DT8CODE_USE_SYSTEM_P4EST=ON -DT8CODE_BUILD_PEDANTIC=ON"
           && export CONFIG_DEBUG="$CONFIG_OPTIONS -DCMAKE_BUILD_TYPE=Debug -DSC_DIR=$SC_DEBUG/install/cmake -DP4EST_DIR=$P4EST_DEBUG/install/cmake"
           && export CONFIG_RELEASE="$CONFIG_OPTIONS -DCMAKE_BUILD_TYPE=Release -DSC_DIR=$SC_RELEASE/install/cmake -DP4EST_DIR=$P4EST_RELEASE/install/cmake"
           && echo CONFIG_OPTIONS="$CONFIG_OPTIONS" >> $GITHUB_ENV
           && echo CONFIG_DEBUG="$CONFIG_DEBUG" >> $GITHUB_ENV
           && echo CONFIG_RELEASE="$CONFIG_RELEASE" >> $GITHUB_ENV
    - name: Check vars
      run: echo "[$CONFIG_DEBUG]"
            && echo "[$CONFIG_RELEASE]"
# configure and test with MPI (release mode)
    - name: Printing MPI compiler info
      run: mpicc --version && mpirun --version
    - name: Printing GCC compiler info
      run: gcc --version && g++ --version
    - name: check release mode
      run: echo "Checking release mode (MPI)"
    - name: echo cmake line
      run: echo cmake $CONFIG_RELEASE
    - name: configure MPI release
      run: mkdir build_release && cd build_release && cmake ../ $CONFIG_RELEASE
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cmake_release_MPI.log
        path: build_release/CMakeFiles/CMakeOutput.log
    - name: make
      run: cd build_release && make $MAKEFLAGS
    - name: make install
      run: cd build_release && make install $MAKEFLAGS
    - name: make test
      run: cd build_release && make test $MAKEFLAGS
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-suite_release_MPI.log
        path: build_release/Testing/Temporary/LastTest.log
# configure and test with MPI (debug mode)
    - name: check debugging mode
      run: echo "Checking debug mode"
    - name: cmake MPI debug
      run: mkdir build_debug && cd build_debug && cmake ../ $CONFIG_DEBUG
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cmake_debug_MPI.log
        path: build_debug/CMakeFiles/CMakeOutput.log
    - name: make
      run: cd build_debug && make $MAKEFLAGS
    - name: make install
      run: cd build_debug && make install $MAKEFLAGS
    - name: make test
      run: cd build_debug && make test $MAKEFLAGS
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-suite_debug_MPI.log
        path: build_debug/Testing/Temporary/LastTest.log
