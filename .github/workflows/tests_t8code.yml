name: t8code tests


#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2024 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
# This github CI script installs t8code and runs its tests for various configurations.
# We compile sc and p4est as thirdparty libraries and use caching to only trigger a
# new installation of them when their versions have changed in t8code.
#
# Note: To manually enforce sc and p4est installation, either increase the counter
#       in the "CACHE_COUNTER:" entries of the sc and p4est steps or set the variables
#       IGNORE_CACHE to true in the respective steps.

on:
  push:
    branches:
      - main
      - develop
      - feature-*CI* # for testing this script, all feature branches with "CI" in their name
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Be able to trigger this manually on github.com
  # Run every night at 1:10
  schedule:
      - cron:  '10 1 * * *'

jobs:
  # Preparation step for serial tests. Repo is cloned and sc + p4est are compiled without MPI.
  preparation_serial:
    if: (github.event_name == 'schedule' && github.repository == 'DLR-AMR/t8code') || (github.event_name != 'schedule')
    uses: ./.github/workflows/tests_t8code_cmake_preparation.yml
    with:
      MAKEFLAGS: -j4
      IGNORE_CACHE: false
      CACHE_COUNTER: 5
      MPI: OFF
  
  # Run serial tests for sc and p4est
  sc_p4est_tests_serial:
    if: ((github.event_name == 'schedule' && github.repository == 'DLR-AMR/t8code') || (github.event_name != 'schedule') && needs.preparation_serial.outputs.USED_CACHE != 1)
    needs: preparation_serial
    uses: ./.github/workflows/tests_sc_p4est_cmake_tests.yml
    with:
      MAKEFLAGS: -j4
      MPI: OFF
      SC_DEBUG: ${{ needs.preparation_serial.outputs.SC_DEBUG }}
      SC_RELEASE: ${{ needs.preparation_serial.outputs.SC_RELEASE }}
      P4EST_DEBUG: ${{ needs.preparation_serial.outputs.P4EST_DEBUG }}
      P4EST_RELEASE: ${{ needs.preparation_serial.outputs.P4EST_RELEASE }}
  
  # Run t8code tests for serial configuration
  t8code_tests_serial:
    if: (github.event_name == 'schedule' && github.repository == 'DLR-AMR/t8code') || (github.event_name != 'schedule')
    needs: preparation_serial
    uses: ./.github/workflows/tests_t8code_cmake_tests.yml
    with:
      MAKEFLAGS: -j4
      MPI: OFF
      SC_DEBUG: ${{ needs.preparation_serial.outputs.SC_DEBUG }}
      SC_RELEASE: ${{ needs.preparation_serial.outputs.SC_RELEASE }}
      P4EST_DEBUG: ${{ needs.preparation_serial.outputs.P4EST_DEBUG }}
      P4EST_RELEASE: ${{ needs.preparation_serial.outputs.P4EST_RELEASE }}


  # Preparation step for parallel tests. Repo is cloned and sc + p4est are compiled with MPI.
  preparation_parallel:
    if: (github.event_name == 'schedule' && github.repository == 'DLR-AMR/t8code') || (github.event_name != 'schedule')
    uses: ./.github/workflows/tests_t8code_cmake_preparation.yml
    with:
      MAKEFLAGS: -j4
      IGNORE_CACHE: false
      CACHE_COUNTER: 5
      MPI: ON
  
    # Run parallel tests for sc and p4est
  sc_p4est_tests_parallel:
    if: ((github.event_name == 'schedule' && github.repository == 'DLR-AMR/t8code') || (github.event_name != 'schedule') && needs.preparation_parallel.outputs.USED_CACHE != 1)
    needs: preparation_parallel
    uses: ./.github/workflows/tests_sc_p4est_cmake_tests.yml
    with:
      MAKEFLAGS: -j4
      MPI: ON
      SC_DEBUG: ${{ needs.preparation_parallel.outputs.SC_DEBUG }}
      SC_RELEASE: ${{ needs.preparation_parallel.outputs.SC_RELEASE }}
      P4EST_DEBUG: ${{ needs.preparation_parallel.outputs.P4EST_DEBUG }}
      P4EST_RELEASE: ${{ needs.preparation_parallel.outputs.P4EST_RELEASE }}
  
  # Run t8code tests for parallel configuration
  t8code_tests_parallel:
    if: (github.event_name == 'schedule' && github.repository == 'DLR-AMR/t8code') || (github.event_name != 'schedule')
    needs: preparation_parallel
    uses: ./.github/workflows/tests_t8code_cmake_tests.yml
    with:
      MAKEFLAGS: -j4
      MPI: ON
      SC_DEBUG: ${{ needs.preparation_parallel.outputs.SC_DEBUG }}
      SC_RELEASE: ${{ needs.preparation_parallel.outputs.SC_RELEASE }}
      P4EST_DEBUG: ${{ needs.preparation_parallel.outputs.P4EST_DEBUG }}
      P4EST_RELEASE: ${{ needs.preparation_parallel.outputs.P4EST_RELEASE }}
