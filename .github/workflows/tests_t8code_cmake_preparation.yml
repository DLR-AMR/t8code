name: CMake CI preparation


#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2024 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
# This github CI script installs t8code and runs its tests for various configurations.
# We compile sc and p4est as thirdparty libraries and use caching to only trigger a
# new installation of them when their versions have changed in t8code.
#
# Note: To manually enforce sc and p4est installation, either increase the counter
#       in the "key:" entries of the sc and p4est steps or set the variables
#       SC_IGNORE_CACHE and P4EST_IGNORE_CACHE to 1 in the respective steps.

on:
  workflow_call:
    inputs:
      MAKEFLAGS:
        required: true
        type: string
    outputs:
      SC_DEBUG:
        description: "Path to the debug build of sc"
        value: ${{ jobs.reusable_cmake_preparation_workflow.outputs.SC_DEBUG }}
      SC_RELEASE:
        description: "Path to the release build of sc"
        value: ${{ jobs.reusable_cmake_preparation_workflow.outputs.SC_RELEASE }}
      P4EST_DEBUG:
        description: "Path to the debug build of p4est"
        value: ${{ jobs.reusable_cmake_preparation_workflow.outputs.P4EST_DEBUG }}
      P4EST_RELEASE:
        description: "Path to the release build of p4est"
        value: ${{ jobs.reusable_cmake_preparation_workflow.outputs.P4EST_RELEASE }}

jobs:
  reusable_cmake_preparation_workflow:
    runs-on: ubuntu-latest
    container: dlramr/t8code-ubuntu:t8-dependencies
    timeout-minutes: 20
    outputs:
      SC_DEBUG: ${{ steps.output_sc_folders.outputs.SC_DEBUG }}
      SC_RELEASE: ${{ steps.output_sc_folders.outputs.SC_RELEASE }}
      P4EST_DEBUG: ${{ steps.output_p4est_folders.outputs.P4EST_DEBUG }}
      P4EST_RELEASE: ${{ steps.output_p4est_folders.outputs.P4EST_RELEASE }}
    steps:
#
# Setup and bootstrap
#
    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0
    - name: Update packages
      run: apt-get update && apt-get upgrade -y
      # This seems to be necessary because of the docker container
    - name: disable ownership checks
      run: git config --global --add safe.directory '*'
    - name: init submodules
      run: git submodule init
    - name: update submodules
      run: git submodule update
#
#       SC installation
#
    - name: store sc folders in var
      run: echo SC_DEBUG=$PWD/sc/build_debug >> $GITHUB_ENV
        && echo SC_RELEASE=$PWD/sc/build_release >> $GITHUB_ENV
    - name: output sc folders
      id: output_sc_folders
      run: echo "SC_DEBUG=$SC_DEBUG" >> $GITHUB_OUTPUT
        && echo "SC_RELEASE=$SC_RELEASE" >> $GITHUB_OUTPUT
    - name: Get sc commit hash
      run: hash=`git rev-parse HEAD:sc` && echo sc_commit=$hash >> $GITHUB_ENV
    - name: Check cache for previous sc installation
      id: sc_cmake_cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.SC_DEBUG }}
          ${{ env.SC_RELEASE }}
        # You can increase the counter at the end to force a new key and hence recomputing the cache
        key: sc-cmake-${{ env.sc_commit }}-005
    - name: Set ignore cache variable
      # If this variable is set 1
      # (i.e. SC_IGNORE_CACHE=1) then the cache will be ignored and
      # sc is always build.
      # We use this mostly for debugging this CI script.
      run: echo SC_IGNORE_CACHE=0 >> $GITHUB_ENV
    - name: Cache info
      if: ${{ steps.sc_cmake_cache.outputs.cache-hit != 'true' ||  env.SC_IGNORE_CACHE == 1 }}
      run: echo No cache found or cache will be ignored. SC_IGNORE_CACHE=$SC_IGNORE_CACHE
    - name: if ignore cache, delete folders
      if: ${{ env.SC_IGNORE_CACHE == 1 }}
      # The true at the end is to ignore errors that i.e. occur when the folders do not exist
      run: rm -r $SC_DEBUG $SC_RELEASE || true
    - name: make folders
      run: mkdir $SC_DEBUG && mkdir $SC_RELEASE
      if: ${{ steps.sc_cmake_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
    - name: install sc
      run: echo "Install sc"
      if: ${{ steps.sc_cmake_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
      ## sc debug
    - name: sc cmake debug
      run: cd $SC_DEBUG && cmake ../ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$PWD/install -Dmpi=ON
      if: ${{ steps.sc_cmake_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
    - name: sc build debug
      run: cd $SC_DEBUG && make $MAKEFLAGS && make $MAKEFLAGS install
      if: ${{ steps.sc_cmake_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
      ## sc release
    - name: sc cmake release
      run: cd $SC_RELEASE && cmake ../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -Dmpi=ON
      if: ${{ steps.sc_cmake_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
    - name: sc build release
      run: cd $SC_RELEASE && make $MAKEFLAGS && make $MAKEFLAGS install
      if: ${{ steps.sc_cmake_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
#
# P4EST
#
    - name: store p4est folders in var
      run: echo P4EST_DEBUG=$PWD/p4est/build_debug >> $GITHUB_ENV
        && echo P4EST_RELEASE=$PWD/p4est/build_release >> $GITHUB_ENV
    - name: output p4est folders
      id: output_p4est_folders
      run: echo "P4EST_DEBUG=$P4EST_DEBUG" >> $GITHUB_OUTPUT
        && echo "P4EST_RELEASE=$P4EST_RELEASE" >> $GITHUB_OUTPUT
    - name: Get p4est commit hash
      run: hash=`git rev-parse HEAD:p4est` && echo p4est_commit=$hash >> $GITHUB_ENV
    - name: Check cache for previous p4est installation
      id: p4est_cmake_cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.P4EST_DEBUG }}
          ${{ env.P4EST_RELEASE }}
        # You can increase the counter at the end to force a new key and hence recomputing the cache
        key: p4est-cmake-${{ env.p4est_commit }}-${{ env.sc_commit }}-005
    - name: Set ignore cache variable
      # If this variable is set to 1 then the cache is ignored and p4est is installed regardless of cache.
      # (set with i.e. P4EST_IGNORE_CACHE=1)
      # We use this mostly for debugging this CI script.
      run: echo P4EST_IGNORE_CACHE=0 >> $GITHUB_ENV
    - name: Cache info
      if: ${{ steps.p4est_cmake_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
      run: echo No cache found or cache will be ignored. P4EST_IGNORE_CACHE=$P4EST_IGNORE_CACHE
    - name: install p4est
      run: echo "Install p4est"
      if: ${{ steps.p4est_cmake_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    - name: if ignore cache, delete folders
      if: ${{ steps.p4est_cmake_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
      # The true at the end is to ignore errors that i.e. occur when the folders do not exist      
      run: rm -r $P4EST_DEBUG $P4EST_RELEASE || true
    - name: make folders
      if: ${{ steps.p4est_cmake_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
      run: mkdir $P4EST_DEBUG $P4EST_RELEASE
    ## p4est debug
    - name: p4est cmake debug
      run: cd $P4EST_DEBUG && cmake ../ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$PWD/install -DP4EST_USE_SYSTEM_SC=ON -DSC_DIR=$SC_DEBUG/install/cmake -DP4EST_ENABLE_MPI=ON
      if: ${{ steps.p4est_cmake_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    - name: p4est build debug
      run: cd $P4EST_DEBUG && make $MAKEFLAGS && make $MAKEFLAGS install
      if: ${{ steps.p4est_cmake_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    ## p4est release
    - name: p4est cmake release
      run: cd $P4EST_RELEASE && cmake ../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DP4EST_USE_SYSTEM_SC=ON -DSC_DIR=$SC_DEBUG/install/cmake -DP4EST_ENABLE_MPI=ON
      if: ${{ steps.p4est_cmake_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    - name: p4est build release
      run: cd $P4EST_RELEASE && make $MAKEFLAGS && make $MAKEFLAGS install
      if: ${{ steps.p4est_cmake_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
#  P4EST AND SC END
