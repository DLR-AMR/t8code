name: "Create an issue in the repository for a PR that does not have one yet"

#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2025 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

on:
  workflow_call:
    inputs:
      DEFAULT_PROJECT:
        type: string
        description: 'The default project to use for the issue'
        required: true
        default: ''
    outputs:
        ISSUE_NUMBER:
            description: 'The number of the issue that was created'
            value: ${{ jobs.create_issue.outputs.ISSUE_NUMBER }}

jobs:
    create_issue:
        runs-on: ubuntu-latest
        outputs:
            ISSUE_NUMBER: ${{ steps.create_issue_and_output_number.outputs.ISSUE_NUMBER }}
        permissions:
          issues: write
          pull-requests: write
          contents: read
        steps:
        - uses: actions/checkout@v5
          with:
                fetch-depth: 0
        - name: "Create Issue"
          id: create_issue_and_output_number
        - name: "Set up PR metadata"
          id: pr_metadata
          run: |
            echo "TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
            echo "AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
                echo "DRAFT=${{ github.event.pull_request.draft }}" >> $GITHUB_OUTPUT

        - name: "Compose Issue Body"
          id: compose_issue_body
          run: |
            if [[ "${{ steps.pr_metadata.outputs.DRAFT }}" == "true" ]]; then
              echo "ISSUE_BODY=This Issue was created because the draft PR did not reference an Issue. Please @${{ steps.pr_metadata.outputs.AUTHOR }} describe the Issue that you are solving." >> $GITHUB_OUTPUT
            else
              echo "ISSUE_BODY=This Issue was created because the PR did not reference an Issue." >> $GITHUB_OUTPUT
            fi

        - name: "Create Issue"
          id: create_issue_and_output_number
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            TITLE="${{ steps.pr_metadata.outputs.TITLE }}"
            AUTHOR="${{ steps.pr_metadata.outputs.AUTHOR }}"
            ISSUE_BODY="${{ steps.compose_issue_body.outputs.ISSUE_BODY }}"
            DEFAULT_PROJECT="${{ inputs.DEFAULT_PROJECT }}"

            if [[ "$AUTHOR" == *"[bot]"* ]]; then
              new_issue_url=$(gh issue create \
                --title "$TITLE" \
                --body "$ISSUE_BODY" \
                --project "$DEFAULT_PROJECT")
            else
              new_issue_url=$(gh issue create \
                --title "$TITLE" \
                --assignee "$AUTHOR" \
                --body "$ISSUE_BODY" \
                --project "$DEFAULT_PROJECT")
            fi
            echo "new_issue_url=$new_issue_url"
            ISSUE_NUMBER=$(echo "$new_issue_url" | awk -F'/' '{print $NF}')
            echo "ISSUE_NUMBER=$ISSUE_NUMBER"
            echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

        - name: "Link Issue to PR"
          id: link_issue
          run: |
                # Add "Closes #ISSUE_NUMBER" to the PR body
                ISSUE_NUMBER="${{ steps.create_issue_and_output_number.outputs.ISSUE_NUMBER }}"
                PR_NUMBER="${{ github.event.pull_request.number }}"
                echo "ISSUE_NUMBER=$ISSUE_NUMBER"
                echo "PR_NUMBER=$PR_NUMBER"
                # Get the PR body
                pr_body=$(jq -r '.pull_request.body // ""' < $GITHUB_EVENT_PATH)
                echo "pr_body=$pr_body"
                # Add the issue number to the PR body
                # Add "Closes #ISSUE_NUMBER" to the top of the PR body
                new_pr_body=$(printf "Closes #%s\n\n%s" "$ISSUE_NUMBER" "$pr_body")
                echo "new_pr_body=$new_pr_body"
                # Update the PR body
                gh pr edit "$PR_NUMBER" --body "$new_pr_body"