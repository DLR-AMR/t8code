name: CMake Tarball

#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2024 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
# This github CI script constructs a tarball and checks if it is build correctly.
#

env:
  MAKEFLAGS: "-j2 V=0"
  DEBUG_CONFIG: "-O1"


on:
  workflow_call: 
    inputs:
      LESS_TESTS:
        required: true
        type: boolean
        description: 'Enable less tests option for configuring'

jobs:
  build:

    if: (github.event_name == 'schedule' && github.repository == 'DLR-AMR/t8code') || (github.event_name != 'schedule')
    runs-on: ubuntu-20.04
    container: dlramr/t8code-ubuntu:t8-dependencies
    timeout-minutes: 90
    steps:
#
# Setup and bootstrap
#
    - uses: actions/checkout@v4
      with:
        fetch-tags: true # required to get version tags
        fetch-depth: 0    # required to get all history, especially the version tags    
    - name: install sudo
      run: apt update && apt install sudo
    # Start building tarball
    - name: Install pandoc
      uses: nikeee/setup-pandoc@v1
    - name: Test pandoc
      run: pandoc --version
    # On the github Ubuntu 20.04, sudo is not available by default
    # we need it, however, to update/upgrade our packages.    
    - name: Update packages
      run: sudo apt-get update && sudo apt-get upgrade -y
    # This step is necessary to get the newest package data
    - name: disable ownership checks
      run: git config --global --add safe.directory '*'
    - name: init submodules
      run: git submodule init
    - name: update submodules
      run: git submodule update

#
#  T8CODE 
#     with p4est and sc as internal dependencies which is needed for make dist
#
#
    - name: build config variables
      run: export CONFIG_OPTIONS="${LESS_TEST_OPTION} -GNinja -DCMAKE_C_FLAGS_DEBUG=$DEBUG_FLAGS -DCMAKE_CXX_FLAGS_DEBUG=$DEBUG_FLAGS -DT8CODE_USE_SYSTEM_SC=OFF -DT8CODE_USE_SYSTEM_P4EST=OFF -DT8CODE_BUILD_PEDANTIC=ON -DT8CODE_BUILD_WALL=ON -DT8CODE_BUILD_WERROR=ON -DT8CODE_ENABLE_MPI=$MPI -DCMAKE_BUILD_TYPE=$BUILD_TYPE"
        && echo CONFIG_OPTIONS="$CONFIG_OPTIONS" >> $GITHUB_ENV
    - name: cmake
      run: mkdir build && cd build && cmake ../ $CONFIG_OPTIONS
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: config.log
        path: build/config.log
# Build the tarball
    - name: Make tarball
      run: cd build && ninja GenerateVersionFile && ninja package_source && mkdir tarballs && mv package/*Source.tar.gz tarballs
# Upload the tarball
    - name: upload tarball
      uses: actions/upload-artifact@v4
      with:
        name: tarballs
        path: build/tarballs

  test-tarball:
    needs: build
    runs-on: ubuntu-20.04
    container: dlramr/t8code-ubuntu:t8-dependencies
    timeout-minutes: 90
    steps:
    - name: install sudo
      run: apt update && apt install sudo
    # On the github Ubuntu 20.04, sudo is not available by default
    # we need it, however, to update/upgrade our packages.       
    - name: Update packages
      run: sudo apt-get update && sudo apt-get upgrade -y
    # This step is necessary to get the newest package data
    - name: Download tarball
      uses: actions/download-artifact@v4
      with:
          name: tarballs
          path: tarballs
    - name: Extract tarball
      run: tar xzf tarballs/*.tar.gz -C $RUNNER_TEMP
    - name: update Github_env
      run: export TAR_DIR="$RUNNER_TEMP/`basename tarballs/*.tar.gz .tar.gz`" &&
          echo TAR_DIR="$TAR_DIR" >>$GITHUB_ENV
          
# build config vars
    - name: less-test-option
      if: ${{ inputs.LESS_TESTS }}
      run: export LESS_TEST_OPTION="-DT8CODE_ENABLE_LESS_TESTS=ON"
           && echo LESS_TEST_OPTION="$LESS_TEST_OPTION" >> $GITHUB_ENV
    - name: build config variables
      run: export CONFIG_OPTIONS="${LESS_TEST_OPTION} -GNinja -DCMAKE_C_FLAGS_DEBUG=${DEBUG_CONFIG} -DCMAKE_CXX_FLAGS_DEBUG=${DEBUG_CONFIG} -DT8CODE_USE_SYSTEM_SC=OFF -DT8CODE_USE_SYSTEM_P4EST=OFF -DT8CODE_BUILD_PEDANTIC=ON -DT8CODE_BUILD_WALL=ON -DT8CODE_BUILD_WERROR=ON  -DT8CODE_ENABLE_MPI=$MPI -DCMAKE_BUILD_TYPE=$BUILD_TYPE"
        && echo CONFIG_OPTIONS="$CONFIG_OPTIONS" >> $GITHUB_ENV
    - name: Check vars
      run: echo "[$CONFIG_DEBUG]"
    - name: configure from Tarball
      run: mkdir build_tar && cd build_tar && cmake $TAR_DIR $CONFIG_OPTIONS
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build_tar.log
        path: build_tar/config.log
    - name: build
      run: cd build_tar && ninja
    - name: install
      run: cd build_tar && ninja install 
    - name: check serial
      run: cd build_tar && ctest -R _serial
    - name: check parallel
      run: cd build_tar && ctest -R _parallel
    - name: OnFailUploadLog
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build_tar.log
        path: build_tar/test-suite.log


