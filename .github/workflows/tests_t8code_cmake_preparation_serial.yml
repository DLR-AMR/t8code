name: Serial CMake CI preparation


#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2024 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

on:
  workflow_call:
    inputs:
      MAKEFLAGS:
        required: true
        type: string
      IGNORE_CACHE:
        required: false
        type: boolean
        default: false
      CACHE_COUNTER:
        required: true
        type: string
    outputs:
      SC_SERIAL_DEBUG:
        description: "Path to the debug build of sc"
        value: ${{ jobs.reusable_cmake_preparation_workflow_serial.outputs.SC_SERIAL_DEBUG }}
      SC_SERIAL_RELEASE:
        description: "Path to the release build of sc"
        value: ${{ jobs.reusable_cmake_preparation_workflow_serial.outputs.SC_SERIAL_RELEASE }}
      P4EST_SERIAL_DEBUG:
        description: "Path to the debug build of p4est"
        value: ${{ jobs.reusable_cmake_preparation_workflow_serial.outputs.P4EST_SERIAL_DEBUG }}
      P4EST_SERIAL_RELEASE:
        description: "Path to the release build of p4est"
        value: ${{ jobs.reusable_cmake_preparation_workflow_serial.outputs.P4EST_SERIAL_RELEASE }}
      SC_SERIAL_CACHE_HIT:
        description: "Whether the sc cache was hit"
        value: ${{ jobs.reusable_cmake_preparation_workflow_serial.outputs.SC_SERIAL_CACHE_HIT }}
      P4EST_SERIAL_CACHE_HIT:
        description: "Whether the p4est cache was hit"
        value: ${{ jobs.reusable_cmake_preparation_workflow_serial.outputs.P4EST_SERIAL_CACHE_HIT }}

jobs:
  reusable_cmake_preparation_workflow_serial:
    runs-on: ubuntu-latest
    container: dlramr/t8code-ubuntu:t8-dependencies
    timeout-minutes: 10
    outputs:
      SC_SERIAL_DEBUG: ${{ steps.output_sc_folders.outputs.SC_SERIAL_DEBUG }}
      SC_SERIAL_RELEASE: ${{ steps.output_sc_folders.outputs.SC_SERIAL_RELEASE }}
      P4EST_SERIAL_DEBUG: ${{ steps.output_p4est_folders.outputs.P4EST_SERIAL_DEBUG }}
      P4EST_SERIAL_RELEASE: ${{ steps.output_p4est_folders.outputs.P4EST_SERIAL_RELEASE }}
      SC_SERIAL_CACHE_HIT: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit }}
      P4EST_SERIAL_CACHE_HIT: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit }}
    steps:
#
# Setup
#
    - uses: actions/checkout@v4
      with: 
        fetch-depth: 0
    - name: Update packages
      run: apt-get update && apt-get upgrade -y
      # This seems to be necessary because of the docker container
    - name: disable ownership checks
      run: git config --global --add safe.directory '*'
    - name: init submodules
      run: git submodule init
    - name: update submodules
      run: git submodule update
#
#       SC installation
#
    - name: store sc folders in var
      run: echo SC_SERIAL_DEBUG=$PWD/sc/build_serial_debug >> $GITHUB_ENV
       && echo SC_SERIAL_RELEASE=$PWD/sc/build_serial_release >> $GITHUB_ENV
    - name: output sc folders
      id: output_sc_folders
      run: echo "SC_SERIAL_DEBUG=$SC_SERIAL_DEBUG" >> $GITHUB_OUTPUT
        && echo "SC_SEROAL_RELEASE=$SC_SERIAL_RELEASE" >> $GITHUB_OUTPUT 
    - name: Get sc commit hash
      run: hash=`git rev-parse HEAD:sc` && echo sc_commit=$hash >> $GITHUB_ENV
    - name: Check cache for previous sc installation
      id: sc_cmake_serial_cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.SC_SERIAL_DEBUG }}
          ${{ env.SC_SERIAL_RELEASE }}
        # You can increase the counter at the end to force a new key and hence recomputing the cache
        key: sc-cmake-${{ env.sc_commit }}-${{ env.CACHE_COUNTER }}
    - name: Cache info
      if: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit != 'true' ||  env.IGNORE_CACHE == 1 }}
      run: echo No cache found or cache will be ignored. IGNORE_CACHE=$IGNORE_CACHE
    - name: if ignore cache, delete folders
      if: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit != 'true' ||  env.SC_IGNORE_CACHE == 1 }}
      # The true at the end is to ignore errors that i.e. occur when the folders do not exist
      run: rm -r $SC_SERIAL_DEBUG $SC_SERIAL_RELEASE || true
    - name: make folders
      run: mkdir $SC_SERIAL_DEBUG && mkdir $SC_SERIAL_RELEASE
      if: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
    - name: install sc
      run: echo "Install sc"
      if: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
      ## sc serial debug
    - name: sc cmake and build serial debug
      run: cd $SC_SERIAL_DEBUG && cmake ../ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$PWD/install
      if: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
    - name: sc build serial debug
      run: cd $SC_SERIAL_DEBUG && make $MAKEFLAGS && make $MAKEFLAGS install
      if: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
      ## sc serial release
    - name: sc cmake and build serial release
      run: cd $SC_SERIAL_RELEASE && cmake ../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install
      if: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
    - name: sc build release serial
      run: cd $SC_SERIAL_RELEASE && make $MAKEFLAGS && make $MAKEFLAGS install
      if: ${{ steps.sc_cmake_serial_cache.outputs.cache-hit != 'true' || env.SC_IGNORE_CACHE == 1 }}
#
# P4EST
#
    - name: store p4est folders in var
      run: echo P4EST_SERIAL_DEBUG=$PWD/p4est/build_serial_debug >> $GITHUB_ENV
       && echo P4EST_SERIAL_RELEASE=$PWD/p4est/build_serial_release >> $GITHUB_ENV
    - name: output p4est folders
      id: output_p4est_folders
      run: echo "P4EST_SERIAL_DEBUG=$P4EST_SERIAL_DEBUG" >> $GITHUB_OUTPUT
        && echo "P4EST_SEROAL_RELEASE=$P4EST_SERIAL_RELEASE" >> $GITHUB_OUTPUT 
    - name: Get p4est commit hash
      run: hash=`git rev-parse HEAD:p4est` && echo p4est_commit=$hash >> $GITHUB_ENV
    - name: Check cache for previous p4est installation
      id: p4est_cmake_serial_cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.P4EST_SERIAL_DEBUG }}
          ${{ env.P4EST_SERIAL_RELEASE }}
        # You can increase the counter at the end to force a new key and hence recomputing the cache
        key: p4est-cmake-${{ env.p4est_commit }}-${{ env.sc_commit }}-${{ env.CACHE_COUNTER }}
    - name: Set ignore cache variable
      # If this variable is set to 1 then the cache is ignored and p4est is installed regardless of cache.
      # (set with i.e. P4EST_IGNORE_CACHE=1)
      # We use this mostly for debugging this CI script.
      run: echo P4EST_IGNORE_CACHE=0 >> $GITHUB_ENV
    - name: Cache info
      if: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
      run: echo No cache found or cache will be ignored. P4EST_IGNORE_CACHE=$P4EST_IGNORE_CACHE
    - name: install p4est
      run: echo "Install p4est"
      if: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    - name: if ignore cache, delete folders
      if: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
      # The true at the end is to ignore errors that i.e. occur when the folders do not exist      
      run: rm -r $P4EST_SERIAL_DEBUG $P4EST_SERIAL_RELEASE || true
    - name: make folders
      run: mkdir $P4EST_SERIAL_RELEASE && mkdir $P4EST_SERIAL_DEBUG
      if: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    ## p4est serial debug
    - name: p4est cmake and build serial debug
      run: cd $P4EST_SERIAL_DEBUG && cmake ../ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$PWD/install -DP4EST_USE_SYSTEM_SC=ON -DSC_DIR=$SC_SERIAL_DEBUG/install/cmake
      if: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    - name: p4est build serial debug
      run: cd $P4EST_SERIAL_DEBUG && make $MAKEFLAGS && make $MAKEFLAGS install
      if: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    ## p4est serial release
    - name: p4est cmake and build serial release
      run: cd $P4EST_SERIAL_RELEASE && cmake ../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DP4EST_USE_SYSTEM_SC=ON -DSC_DIR=$SC_SERIAL_DEBUG/install/cmake
      if: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}
    - name: p4est build serial release
      run: cd $P4EST_SERIAL_RELEASE && make $MAKEFLAGS && make $MAKEFLAGS install
      if: ${{ steps.p4est_cmake_serial_cache.outputs.cache-hit != 'true' || env.P4EST_IGNORE_CACHE == 1 }}

    ## upload artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SC_P4EST_SERIAL
        path: ./
        retention-days: 1