name: "Upload newest documentation to website"

#  This file is part of t8code.
#  t8code is a C library to manage a collection (a forest) of multiple
#  connected adaptive space-trees of general element types in parallel.
#
#  Copyright (C) 2025 the developers
#
#  t8code is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  t8code is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with t8code; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

#
# This github CI script runs on every push or merged pr on the main branch.
# It generates the doxygen documentation of the main branch and uploads it
# to the t8code website
#

on:
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  update_dev_doc:

    runs-on: ubuntu-22.04

    timeout-minutes: 10
    steps:
#
# Setup and bootstrap
#
    - uses: actions/checkout@v5    
      with:
        fetch-tags: true # required to get version tags
        fetch-depth: 0    # required to get all history, especially the version tags
    - name: Update packages
      run: sudo apt-get update && sudo apt-get upgrade -y
    # This step is necessary to get the newest package data
    - name: Install doxygen
      run: sudo apt-get install doxygen-latex
    - name: init submodules
      run: git submodule init
    - name: update submodules
      run: git submodule update

# build config vars
    - name: build CFLAGS and CXXFLAGS variables
      run: echo CFLAGS_var="-Wall -pedantic -O3" >> $GITHUB_ENV
        && echo CXXFLAGS_var="-Wall -pedantic -O3" >> $GITHUB_ENV
    - name: build config variables
      run: export CONFIG_OPTIONS="--without-blas ${TEST_LEVEL_FLAG}"
           && export CONFIG_SERIAL_DEBUG="$CONFIG_OPTIONS --enable-debug --with-sc=$SC_SERIAL_DEBUG/install --with-p4est=$P4EST_SERIAL_DEBUG/install"
    - name: Check vars
      run: echo "[$CONFIG_SERIAL_DEBUG]"
# configure and generate doxygen
    - name: check debugging mode
      run: echo "Checking debug mode"
    - name: configure
      run: mkdir build_debug && cd build_debug && ../configure $CONFIG_SERIAL_DEBUG CFLAGS="$CFLAGS_var" CXXFLAGS="$CXXFLAGS_var"
    - name: check doxygen
      run: cd doc && doxygen Doxyfile >> output 2>&1
    - name: check for doxygen warnings
      run: |
        if grep -i warning doc/output; then
          echo "Doxygen warnings found!"
          exit 1
        else
          echo "No doxygen warnings found."
        fi
    

